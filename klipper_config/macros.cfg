
[include speed_test.cfg]
[include KAMP_Settings.cfg]

[gcode_macro GOTO_CENTER]
description: Moves the print head to the center, 50mm above the plate
gcode:
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set z_center = 50.0 %}

  {% if "xyz" not in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
    MOTION_INIT
  {% endif %}

  G90 ; absolute positioning
  G0 X{x_center} Y{y_center} Z{z_center} F7800


[gcode_macro MOTION_INIT]
description: Performs homing, gantry leveling, and Z-calibration
variable_warming_temp: 160
gcode:
  {% set EXTRUDER_TARGET_TEMP = printer[printer.toolhead.extruder].target|float %}
  {% set EXTRUDER_ACTUAL_TEMP = printer[printer.toolhead.extruder].temperature|float %}
  {% set TEMP_MODIFIED = False %}

  SET_DISPLAY_TEXT MSG="Running MOTION_INIT"

  CHAMBER_WHITE
  SET_SB_LEDS_OFF

  BED_MESH_CLEAR
  
  {% if EXTRUDER_TARGET_TEMP > warming_temp or EXTRUDER_ACTUAL_TEMP > warming_temp %}
    SET_DISPLAY_TEXT MSG="MOTION_INIT: nozzle cooling..."
    STATUS_HEATING

    {% if EXTRUDER_ACTUAL_TEMP < warming_temp %}
      # since the actual temperature is below the warming temperature,
      # even though a higher temperature is set, just use that value
      # to make the heating stop where it is...
      M104 S{EXTRUDER_ACTUAL_TEMP} T0

    {% else %}
      # ...otherwise, wait for the temperature to drop
      M106 S200 ; turn on the part cooling fan, helps cool the nozzle
      M109 S{warming_temp} T0
      M106 S0   ; turn the part cooling fan back off

    {% endif %}

    {% set TEMP_MODIFIED = True %}
  {% endif %}

  SET_DISPLAY_TEXT MSG="MOTION_INIT: Homing..."
  STATUS_HOMING
  G28

  SET_DISPLAY_TEXT MSG="MOTION_INIT: Leveling the gantry..."
  STATUS_LEVELING
  QUAD_GANTRY_LEVEL
  
  SET_DISPLAY_TEXT MSG="MOTION_INIT: Re-homing Z..."
  STATUS_HOMING
  G28 Z

  ### Previous Klicky
  #SET_DISPLAY_TEXT MSG="MOTION_INIT: Calibrating Z offset..."
  #STATUS_CALIBRATING_Z
  #CALIBRATE_Z

  {% if TEMP_MODIFIED %}
    SET_DISPLAY_TEXT MSG="MOTION_INIT: nozzle re-heating..."
    STATUS_HEATING
    M104 S{EXTRUDER_TARGET_TEMP} T0 ; restore original target temperature and continue
  {% endif %}

  # move toolhead to the center, raised up high
  SET_DISPLAY_TEXT MSG="MOTION_INIT: centering toolhead..."
  GOTO_CENTER

  STATUS_READY
  SET_DISPLAY_TEXT MSG="MOTION_INIT complete!"


[gcode_macro PRIME_LINE]
description: Used in START_PRINT to draw a prime/purge line along the left edge of the bed at the start of a print job
gcode:
  {% set NOZZLE_DIAMETER = printer.configfile.settings[printer.toolhead.extruder].nozzle_diameter|float %}

  {% set X_MIN = printer.toolhead.axis_minimum.x|float %}
  {% set Y_MIN = printer.toolhead.axis_minimum.y|float %}
  {% set X_MAX = printer.toolhead.axis_maximum.x|float %}
  {% set Y_MAX = printer.toolhead.axis_maximum.y|float %}
  
  {% set PURGE_WIDTH = 1.25 * NOZZLE_DIAMETER %}
  {% set PURGE_HEIGHT = 0.625 * NOZZLE_DIAMETER %}

  {% set X_START = X_MIN + 10.0 %}
  {% set X_END = X_START + PURGE_WIDTH %}
  {% set Y_START = Y_MIN + 10.0 %}
  {% set Y_END = Y_MAX - 30.0 %}

  {% if "xyz" not in printer.toolhead.homed_axes %}
    {action_respond_info("Aborting PRIME_LINE: toolhead has not been homed")}

  {% elif not printer.extruder.can_extrude %}
    {action_respond_info("Aborting PRIME_LINE: extruder temperature too low")}

  {% else %}

    STATUS_BUSY
    SET_NOZZLE_LEDS_ON

    SAVE_GCODE_STATE NAME=prime_line_state
    
      RESET_SPEED

      M82    ; Absolute extrusion
      G90    ; Absolute movement
      G92 E0 ; Reset extruder
        
      G0 Z3 F2500 ; Make sure Z-axis is high enough to prevent scratching

      G0 X{X_START} Y{Y_START} Z{PURGE_HEIGHT} F5000.0     ; Move to start position
      G1 X{X_START} Y{Y_END}   Z{PURGE_HEIGHT} F1500.0 E15 ; Draw the first line, front-to-rear
      G0 X{X_END}   Y{Y_END}   Z{PURGE_HEIGHT} F5000.0     ; Scoot over
      G1 X{X_END}   Y{Y_START} Z{PURGE_HEIGHT} F1500.0 E30 ; Draw the second line, rear-to-front
      
      # Move away, as the start of the print might drop the nozzle down
      # to 0 before moving XY, and we don't want the nozzle in the shit
      G91 ; Relative movement
      G0 X10 Y10 Z5 F2000

    RESTORE_GCODE_STATE NAME=prime_line_state MOVE=0

  {% endif %}


[gcode_macro START_PRINT]
gcode:
  CLEAR_PAUSE
  CHAMBER_WHITE
  STATUS_BUSY

  BED_MESH_CLEAR

  # ensure the exhaust fan isn't still runing from a previous job
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0

  # Start Nevermore fans
  SET_FAN_SPEED FAN=nevermore_fans SPEED=0.5

  SET_DISPLAY_TEXT MSG="Preparing to print..."

  # Get Bed and Extruder temperature from Slicer GCode
  {% set BED_TEMP      = params.BED_TEMP|default(100)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
  {% set CHAMBER_TEMP  = params.CHAMBER_TEMP|default(35)|float %}

  # get actual axtruder temp
  {% set EXTRUDER_ACTUAL_TEMP = printer[printer.toolhead.extruder].temperature|float %}

  {% set QGL_OK = printer.quad_gantry_level.applied %}

  {% if EXTRUDER_ACTUAL_TEMP < 160 %}
    M104 S160 T0    ; set extruder to warm (but not hot) temperature and continue
  {% endif %}
  M140 S{BED_TEMP}  ; set bed temperature and continue

  SAVE_GCODE_STATE NAME=pre_print_state
          
    RESET_SPEED

    {% if "xyz" not in printer.toolhead.homed_axes %}
      {% set QGL_OK = False %}
      SET_DISPLAY_TEXT MSG="Preparing to print: homing..."
      STATUS_HOMING
      G28
    {% endif %}

    SET_DISPLAY_TEXT MSG="Preparing to print: warming up..."
    STATUS_HEATING
    M190 S{BED_TEMP}  ; set bed temperature and wait
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={CHAMBER_TEMP}

    {% if not QGL_OK %}
      SET_DISPLAY_TEXT MSG="Preparing to print: leveling..."
      STATUS_LEVELING
      QUAD_GANTRY_LEVEL
    {% endif %}
    
    SET_DISPLAY_TEXT MSG="Preparing to print: cleaning nozzle..."
    STATUS_CLEANING
    CLEAN_NOZZLE

    {% if not QGL_OK %}
      SET_DISPLAY_TEXT MSG="Preparing to print: re-homing Z..."
      STATUS_HOMING
      G28 Z
    {% endif %}

    SET_DISPLAY_TEXT MSG="Preparing to print: calibrating bed mesh..."
    STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1  ; This is from `klicky-probe/bed-mesh-calibrate.cfg`,
                                   ; which overrides the built-in macro, which now supports
                                   ; adaptive mesh (so the KAMP version has been disabled)

    ### Previous Klicky
    #SET_DISPLAY_TEXT MSG="Preparing to print: calibrating Z..."
    #STATUS_CALIBRATING_Z
    #CALIBRATE_Z

    SET_DISPLAY_TEXT MSG="Preparing to print: nozzle heating..."
    STATUS_HEATING
    SMART_PARK
    M109 S{EXTRUDER_TEMP} T0  ; set extruder temperature and wait

    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.2
    SET_FAN_SPEED FAN=nevermore_fans SPEED=0.9

    SET_DISPLAY_TEXT MSG="Preparing to print: taking a quick shit..."
    STATUS_BUSY
    VORON_PURGE
    # PRIME_LINE
  
  RESTORE_GCODE_STATE NAME=pre_print_state MOVE=0

  ### SKEW_PROFILE LOAD=calilantern_skew_profile

  SET_DISPLAY_TEXT

  STATUS_PRINTING


[gcode_macro END_PRINT]
gcode:
  CLEAR_PAUSE

  SET_SKEW CLEAR=1

  SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  SET_FAN_SPEED FAN=nevermore_fans SPEED=1.0

  RESET_SPEED
  
  M400                           ; wait for buffer to clear

  {% set extrude = printer['gcode_macro PARK_HEAD'].extrude %}
  G92 E0                         ; zero the extruder
  G1 E-{extrude} F3600           ; retract filament

  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set current_z = printer.toolhead.position.z|float %}

  # We prefer to raise up 10mm...
  {% set safe_z = 10.0 %}

  # ...but if 10mm up is too high, then go for the difference
  {% if current_z > (max_z - safe_z) %}
    {% set safe_z = max_z - current_z %}
  {% endif %}

  G91                            ; relative positioning
  G0 Z{safe_z} F3600             ; raise nozzle up
  G90                            ; absolute positioning

  {% set safe_y = printer['gcode_macro CLEAN_NOZZLE'].start_y %}
  G0 Y{safe_y} F3600             ; move to the back
  M400                           ; wait for buffer to clear

  CLEAN_NOZZLE

  BED_MESH_CLEAR

  SET_NOZZLE_LEDS_OFF
  CHAMBER_PURPLE
  STATUS_PART_READY

  PARK_HEAD
  TURN_OFF_HEATERS

  M107 ; turn off fan
  #M84  ; Disable steppers


[gcode_macro CANCEL_PRINT]
description: Cancel the running print job
rename_existing: CANCEL_PRINT_BASE
gcode:
  CHAMBER_WHITE

  SET_DISPLAY_TEXT MSG="Print cancelled"
  STATUS_ERROR

  CLEAR_PAUSE
  RESET_SPEED

  SET_SKEW CLEAR=1

  CLEAN_NOZZLE

  BED_MESH_CLEAR

  PARK_HEAD
  TURN_OFF_HEATERS

  SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  SET_FAN_SPEED FAN=nevermore_fans SPEED=1.0

  CANCEL_PRINT_BASE


[gcode_macro PAUSE]
description: Pause the running print job
rename_existing: PAUSE_BASE
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0
  SET_FAN_SPEED FAN=nevermore_fans SPEED=0.50

  SET_DISPLAY_TEXT MSG="Printing paused"

  SAVE_GCODE_STATE NAME=paused_state

  PAUSE_BASE
  PARK_HEAD
  

[gcode_macro RESUME]
description: Resume the paused print job
rename_existing: RESUME_BASE
gcode:
  {% set extrude = printer['gcode_macro PARK_HEAD'].extrude %}

  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {% else %}
    {% set get_params = "" %}
  {% endif %}

  ##### end of definitions
  
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0.2
  SET_FAN_SPEED FAN=nevermore_fans SPEED=0.90

  {% if printer.extruder.can_extrude %}
    M83
    G1 E{extrude} F2100
    M82
  {% endif %}

  RESTORE_GCODE_STATE NAME=paused_state MOVE=1
  RESUME_BASE {get_params}


[gcode_macro PARK_HEAD]
description: Park the toolhead in right-rear corner, meant to be used in PAUSE, CANCEL_PRINT, and END_PRINT
variable_extrude: 1.0
gcode:
  # set park positon for x and y
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 10.0 %}

  # determine safe lift height
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}

  ##### end of definitions

  {% if printer.extruder.can_extrude %}
    M83
    G1 E-{extrude} F2100
    M82
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}
    G91                           ; relative positioning
    G1 Z{z_safe} F900
    G90                           ; absolute positioning
    G1 X{x_park} Y{y_park} F6000
    G91                           ; relative positioning
  {% endif %}


[gcode_macro LOAD_FILAMENT]
gcode:
  STATUS_M701
  SET_NOZZLE_LEDS_ON

  {% set CURRENT_TEMP = printer[printer.toolhead.extruder].target|float %}
  {% set DESIRED_TEMP = params.EXTRUDER_TEMP|default(220)|float %}

  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set z_center = 100.0 %}
  
  M83                        ; set extruder to relative
  G90                        ; Absolute positioning

  {% if CURRENT_TEMP > DESIRED_TEMP %}
    SET_DISPLAY_TEXT MSG="Pre-loading filament"
    G1 E50 F1000             ; Grab the filament now so we don't have to hold it while waiting
    M400                     ; Wait for buffer to clear
  {% endif %}
  
  {% if CURRENT_TEMP < DESIRED_TEMP %}
    SET_DISPLAY_TEXT MSG="Waiting for extruder to heat"
    M109 S{DESIRED_TEMP} T0
  {% endif %}

  {% if "xyz" in printer.toolhead.homed_axes %}
    ### If we're homed, then its safe to prime/purge a length of filament...

    {% if printer['toolhead'].position.z >= z_center %}
      ### Looks like we're already high enough, just go to the center
      G0 X{x_center} Y{y_center} F7800
    {% else %}
      ### Move to the center, but raise up so the extrudent doesn't wad up
      G0 X{x_center} Y{y_center} Z{z_center} F7800
    {% endif %}
    M400                     ; Wait for buffer to clear

    SET_DISPLAY_TEXT MSG="Priming filament"
    G1 E100 F240             ; prime/purge most of the filament before turning on the fan
    M106 S63.75              ; set part cooling fan to 25%
    G1 E20 F240              ; purge a little more filament while the fan is on

    M400                     ; Wait for buffer to clear

    M106 S0                  ; stop part cooling fan
    
  {% else %}
    ### ...or if we're not homed, then just push filament to the nozzle
    SET_DISPLAY_TEXT MSG="Priming filament"
    G1 E100 F240             ; prime nozzle with filament
  {% endif %}

  G1 E-5 F100                ; Pull back some filament to reduce oozing

  M82                        ; set extruder to absolute

  M400                       ; Wait for buffer to clear

  SET_DISPLAY_TEXT MSG="Filament load complete"
  M104 S{CURRENT_TEMP} T0

  STATUS_READY
  SET_NOZZLE_LEDS_ON


[gcode_macro UNLOAD_FILAMENT]
gcode:
  STATUS_M702

  CLEAR_ACTIVE_SPOOL

  {% set CURRENT_TEMP = printer[printer.toolhead.extruder].target|float %}
  {% set DESIRED_TEMP = params.EXTRUDER_TEMP|default(200)|float %}

  {% if CURRENT_TEMP < DESIRED_TEMP %}
    SET_DISPLAY_TEXT MSG="Waiting for extruder to heat"
    M109 S{DESIRED_TEMP} T0
  {% endif %}

  M83                        ; set extruder to relative
    SET_DISPLAY_TEXT MSG="Pulling filament back"
    #G1 E1 F250              ; extrude a little to soften tip
    G1 E-500 F1800           ; retract
  M82                        ; set extruder to absolute
  M400                       ; Wait for buffer to clear
  SET_DISPLAY_TEXT MSG="Filament unload complete"
  M104 S{CURRENT_TEMP} T0

  STATUS_READY


[gcode_macro CLEAN_NOZZLE]
variable_start_x: 250
variable_start_y: 345
variable_start_z: 8
variable_wipe_dist_x: 60
variable_wipe_dist_y: 3
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 10
gcode:
  SET_DISPLAY_TEXT MSG="Cleaning nozzle"

  {% if "xyz" not in printer.toolhead.homed_axes %}
    {action_respond_info("Toolhead has not been homed; nozzle cleaning cancelled")}
    SET_DISPLAY_TEXT MSG="Nozzle cleaning cancelled"
    
  {% else %}

    {% set CURRENT_TEMP = printer[printer.toolhead.extruder].target|float %}
    {% set DESIRED_TEMP = params.EXTRUDER_TEMP|default(240)|float %}

    {% if DESIRED_TEMP > CURRENT_TEMP %}
      SET_DISPLAY_TEXT MSG="Waiting for extruder to heat"
      STATUS_HEATING
      M109 S{DESIRED_TEMP} T0
    {% endif %}

    STATUS_CLEANING

    SAVE_GCODE_STATE NAME=clean_nozzle_state
      
      RESET_SPEED
      
      ## Move nozzle to start position
      G90 ; absolute positioning
      G0 X{start_x} Y{start_y} Z{start_z + raise_distance} F6000
      G0 Z{start_z} F1500

      ## Wipe nozzle
      G91 ; relative positioning
      G0 F{wipe_spd * 60}
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G0 X{wipe_dist_x}  ; right across the brush
        G0 Y{wipe_dist_y}  ; back a little
        G0 X-{wipe_dist_x} ; left across the brush
        G0 Y-{wipe_dist_y} ; forward a little
      {% endfor %}

      ## Raise nozzle
      G0 Z{raise_distance}

    RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=0

    SET_DISPLAY_TEXT MSG="Nozzle cleaning complete"
    M104 S{CURRENT_TEMP} T0
    STATUS_READY

  {% endif %}


[gcode_macro RESET_SPEED]
description: Used to reset speed and acceleration back to defaults, primarily for use in SAVE/RESTORE_GCODE_STATE blocks
gcode:  
    {% set MAX_ACCEL = printer.configfile.settings.printer.max_accel|int %}
    {% set MIN_CRUISE_RATIO = printer.configfile.settings.printer.minimum_cruise_ratio|int %}
    {% set MAX_VELOCITY = printer.configfile.settings.printer.max_velocity|int %}
    
    M400               ; Wait for current moves to finish

    M220 S100          ; Restore the speed back to 100%
                       ; Restore the acceleration/velocity back to config file value
    SET_VELOCITY_LIMIT ACCEL={MAX_ACCEL} MINIMUM_CRUISE_RATIO={MIN_CRUISE_RATIO} VELOCITY={MAX_VELOCITY}
    

[gcode_macro QUERY_CHAMBER]
gcode:
    {% set sensor = printer["bme280 Chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
          sensor.temperature,
          sensor.pressure,
          sensor.humidity
        )
    )}


[gcode_macro DUMP_VARIABLES]
description: Shits out all Klipper variables to make it easy to find what you need for use in macros
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


[gcode_macro M73]
rename_existing: M73.1
description: Override Klipper's interpretation of M73 to include time remaining
gcode:
  M117 { "%02d:%02d" % (params.R|int // 60, (params.R|int) % 60) } remaining
  M73.1 P{ params.P|int}
